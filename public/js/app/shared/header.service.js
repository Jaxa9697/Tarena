"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Created by Jahongir on 13-Apr-17.
 */
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
require("rxjs/add/operator/toPromise");
require("rxjs/Rx");
var components_model_1 = require("./components.model");
var HeaderService = (function () {
    function HeaderService(http) {
        this.http = http;
    }
    HeaderService.prototype.getAtcContent = function () {
        return this.http.get('/getAtcContent')
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.getWOContent = function (query) {
        return this.http.get(query)
            .map(function (data) {
            return data.json();
        }).map(function (data) {
            var rows = [];
            if (data) {
                data.forEach(function (el, i) {
                    var row = new components_model_1.Wifi((i + 1), el.ID, el.type, el.name_cl, el.itMan, el.address, el.n_passport, el.telephone, el.phone, el.ipAddress, el.vlan, el.id_client);
                    rows.push(row);
                });
            }
            return rows;
        });
    };
    HeaderService.prototype.getVlanContent = function () {
        return this.http.get('/getVlanContent')
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.getPrivilegeContent = function () {
        return this.http.get('/getPrivilegeContent')
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.getUserPrivileges = function (user, number) {
        var pAtc = new components_model_1.CRUD(user.p_atc).getcrud();
        var pVlan = new components_model_1.CRUD(user.p_vlan).getcrud();
        var pReport = new components_model_1.CRUD(user.p_report).getcrud();
        var pWifi = new components_model_1.CRUD(user.p_wifi).getcrud();
        var pOptics = new components_model_1.CRUD(user.p_optics).getcrud();
        return new components_model_1.Privilege(user.ID, number, user.username, user.status, pAtc, pVlan, pReport, pWifi, pOptics, false);
    };
    HeaderService.prototype.getReportContent = function () {
        return this.http.get('/getReportContent')
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.getProblemContent = function () {
        var _this = this;
        return this.http.get('/getProblemContent')
            .map(function (data) {
            return data.json();
        }).map(function (data) {
            var problems = [];
            data.forEach(function (el, i) {
                var createDate = _this.getDate(new Date(el.createDate));
                var solveDate = _this.getDate(new Date(el.solveDate));
                if (!el.solveDate) {
                    solveDate = '';
                }
                var problem = new components_model_1.Problem(el.ID, (i + 1), createDate, solveDate, el.username, el.problem, !!el.solveDate, false);
                problems.push(problem);
            });
            return problems;
        });
    };
    HeaderService.prototype.getSignContent = function () {
        return this.http.get('/getSignContent')
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.getVlanList = function () {
        return this.http.get('/getVlanList')
            .map(function (data) {
            return data.json();
        }).map(function (data) {
            return {
                vlans: Object.values(data.vlan),
                atcs: Object.values(data.atc)
            };
        });
    };
    HeaderService.prototype.getAtcContentById = function (id) {
        return this.http.get('/getAtcContentById?id=' + id.toString())
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.getClientsByVlan = function (vlan) {
        return this.http.get('/getClientsByVlan?id=' + vlan.id.toString())
            .map(function (data) {
            return data.json();
        }).map(function (data) {
            var quantity = 255 - Number(vlan.subnetMask.split(".")[3]);
            var gatewayArray = vlan.gateway.split(".");
            var idNode = Number(gatewayArray[3]);
            gatewayArray.splice(-1, 1);
            var networkNode = gatewayArray.join().replace(/,/g, ".");
            var isData;
            var client;
            var clients = [];
            for (var i = 1; i <= quantity; i++) {
                var ip = networkNode + "." + (idNode + i);
                for (var j = 0; j < data.length; j++) {
                    if (data[j].ipAddress == ip) {
                        isData = true;
                        client = new components_model_1.VlansClients(i, data[j].name_cl, data[j].telephone, data[j].ipAddress);
                        break;
                    }
                    else {
                        isData = false;
                    }
                }
                if (!isData) {
                    client = new components_model_1.VlansClients(i, '', '', ip);
                }
                clients.push(client);
            }
            return clients;
        });
    };
    HeaderService.prototype.addNewVlan = function (obj) {
        var body = JSON.stringify(obj);
        var headers = new http_1.Headers({ 'Content-Type': 'application/json;charset=utf-8' });
        return this.http.post('/addNewVlan', body, { headers: headers })
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.addNewAtc = function (obj) {
        var body = JSON.stringify(obj);
        var headers = new http_1.Headers({ 'Content-Type': 'application/json;charset=utf-8' });
        return this.http.post('/addNewAtc', body, { headers: headers })
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.addNewWO = function (obj) {
        var body = JSON.stringify(obj);
        var headers = new http_1.Headers({ 'Content-Type': 'application/json;charset=utf-8' });
        return this.http.post('/addNewWO', body, { headers: headers })
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.deleteVlan = function (id) {
        return this.http.delete('/deleteVlan?id=' + id)
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.deleteAtc = function (id) {
        return this.http.delete('/deleteAtc?id=' + id)
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.deleteWO = function (id) {
        return this.http.delete('/deleteWO?id=' + id)
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.updateVlan = function (obj) {
        var body = JSON.stringify(obj);
        var headers = new http_1.Headers({ 'Content-Type': 'application/json;charset=utf-8' });
        return this.http.put('/updateVlan', body, { headers: headers })
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.updateAtc = function (obj) {
        var body = JSON.stringify(obj);
        var headers = new http_1.Headers({ 'Content-Type': 'application/json;charset=utf-8' });
        return this.http.put('/updateAtc', body, { headers: headers })
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.updateWO = function (obj) {
        var body = JSON.stringify(obj);
        var headers = new http_1.Headers({ 'Content-Type': 'application/json;charset=utf-8' });
        return this.http.put('/updateWO', body, { headers: headers })
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.saveReport = function (data) {
        var body = JSON.stringify(data);
        var headers = new http_1.Headers({ 'Content-Type': 'application/json;charset=utf-8' });
        return this.http.post('/saveReport', body, { headers: headers })
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.saveNewProblem = function (data) {
        var body = JSON.stringify(data);
        var headers = new http_1.Headers({ 'Content-Type': 'application/json;charset=utf-8' });
        return this.http.post('/saveNewProblem', body, { headers: headers })
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.filterReportRows = function (data) {
        var body = JSON.stringify(data);
        var headers = new http_1.Headers({ 'Content-Type': 'application/json;charset=utf-8' });
        return this.http.post('/filterReportRows', body, { headers: headers })
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.saveUserPrivileges = function (user) {
        var body = JSON.stringify(user);
        var headers = new http_1.Headers({ 'Content-Type': 'application/json;charset=utf-8' });
        return this.http.put('/saveUserPrivileges', body, { headers: headers })
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.solvingProblem = function (data) {
        var body = JSON.stringify(data);
        var headers = new http_1.Headers({ 'Content-Type': 'application/json;charset=utf-8' });
        return this.http.put('/saveSolvedProblem', body, { headers: headers })
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.searchData = function (query) {
        return this.http.get('/searchData?query=' + query)
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.getResultSearch = function (id) {
        return this.http.get('/getResultSearch?id=' + id.toString())
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.changePassword = function (password) {
        var body = JSON.stringify(password);
        var headers = new http_1.Headers({ 'Content-Type': 'application/json;charset=utf-8' });
        return this.http.put('/changePassword', body, { headers: headers })
            .map(function (data) {
            return data.json();
        });
    };
    HeaderService.prototype.getDate = function (date) {
        var day = date.getDate(), month = date.getMonth() + 1, year = date.getFullYear(), hour = date.getHours(), minute = date.getMinutes();
        // second = date.getSeconds();
        if (month < 10) {
            month = '0' + month;
        }
        if (day < 10) {
            day = '0' + day;
        }
        if (hour < 10) {
            hour = '0' + hour;
        }
        if (minute < 10) {
            minute = '0' + minute;
        }
        // if (second < 10){ second = '0' + second; }
        return year + "-" + month + "-" + day + " " + hour + ":" + minute;
    };
    return HeaderService;
}());
HeaderService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], HeaderService);
exports.HeaderService = HeaderService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
